@model SOP.Core.Models.BookingModel

@{
    ViewBag.Title = "NewBooking";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="login-panel panel panel-default" style="margin: 2% 0">
    <div class="panel-heading">
        <h3 class="panel-title">Book for Service</h3>
    </div>
    <div class="panel-body">
        @using (Html.BeginForm())
        {
            @Html.HiddenFor(m => m.UserId);
            
            <div class="row">
                <div class="col-lg-4">
                    <fieldset>
                        <div class="form-group">
                            <label>Vehicle owner name</label>
                            @Html.TextBoxFor(d => d.VehicleOwnerName, new { @class = "form-control", @placeholder = "Vehicle owner name" })
                        </div>
                        <div class="form-group">
                            <label>Vehicle Number</label>
                            @Html.TextBoxFor(d => d.VehicleNumber, new { @class = "form-control", @placeholder = "Vehicle Number" })
                        </div>
                        <div class="form-group">
                            <label>Address</label>
                            @Html.TextBoxFor(d => d.Address, new { @class = "form-control", @placeholder = " Address" })
                        </div>
                        <div class="form-group">
                            <label>Mobile Number</label>
                            @Html.TextBoxFor(d => d.MobileNumber, new { @class = "form-control", @placeholder = "Mobile Number" })
                        </div>
                        <div class="form-group">
                            <label>Email Id</label>
                            @Html.TextBoxFor(d => d.EmailId, new { @class = "form-control", @placeholder = "Email Id" })
                        </div>
                        <div class="form-group">
                            <label>Date of birth</label>
                            @Html.TextBoxFor(m => m.VehicleownerDOB, new { @id = "dpDob", @class = "datepicker form-control", @placeholder = "Select Date", @readonly = "" })
                        </div>
                        <div class="form-group">
                            <label>Vehicle Model</label>
                            @Html.TextBoxFor(d => d.VehicleModel, new { @class = "form-control", @placeholder = "Vehicle Model" })
                        </div>
                        <div class="form-group">
                            <label>Manufactured year</label>
                            @Html.TextBoxFor(d => d.ManufacturingYear, new { @class = "form-control", @placeholder = "Manufactured year" })
                        </div>
                    </fieldset>
                </div>
                <div class="col-lg-4">
                    <fieldset>

                        <div class="form-group">
                            <label>Vehicle location</label>
                            @Html.TextBoxFor(d => d.VehicleLocation, new { @class = "form-control", @placeholder = "vehicle location" })
                        </div>
                        <div class="form-group">
                            <label>Service center choice</label>
                            @Html.DropDownListFor(m => m.DealerId, Model.Dealers, new { @class = "form-control", @onchange = "GetDealerDetails(this);" })
                        </div>
                        <div class="form-group">
                            <label>Service center number</label>
                            @Html.TextBoxFor(d => d.DealerNumber, new { @id = "txtDealerNum", @class = "form-control", @placeholder = "Service center number", @readonly = "" })
                        </div>
                        <div class="form-group">
                            <label>Service center Email Id</label>
                            @Html.TextBoxFor(d => d.DealerEmail, new { @id = "txtDealerEmailId", @class = "form-control", @placeholder = "Service center Email Id", @readonly = "" })
                        </div>
                        <div class="form-group">
                            <label>Service Type</label>
                            @Html.DropDownListFor(m => m.ServiceTypeId, Model.ServiceTypes, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            <label>Date of service</label>
                            @Html.TextBoxFor(m => m.DateofService, new { @id = "dpDos", @class = "datepicker form-control", @placeholder = "Select Date", @readonly = "" })
                        </div>
                        <div class="form-group">
                            <label>Demanded Repairs</label>
                            @Html.TextBoxFor(d => d.DemandedRepairs, new { @class = "form-control", @placeholder = "Demanded Repairs" })
                        </div>
                        <div class="form-group">
                            <label>City/Town</label>
                            @Html.TextBoxFor(m => m.Cityortown, new { @class = "form-control", @placeholder = "City/Town" })
                        </div>
                    </fieldset>

                </div>
                <div class="col-lg-4">
                    <fieldset>
                        <div class="form-group">

                            <input type="radio" name="BookingOnbehalf" id="bookbyowner" checked="checked" onclick="Togglesecretquestion();" />
                            <label>Booking by owner</label>
                            <input type="radio" name="BookingOnbehalf" id="bookonbehalf" onclick="Togglesecretquestion();" />
                            <label>Booking on behalf</label>
                        </div>
                        <div class="form-group secret-question">
                            <label>Secret Question</label>
                            @Html.DropDownListFor(m => m.SecretQuestionId, Model.SecretQuestions, "Select Service center", new { @class = "form-control" })
                        </div>
                        <div class="form-group secret-question">
                            <label>Secret Answer</label>
                            @Html.TextBoxFor(m => m.SecretAnswer, new { @class = "form-control", @placeholder = "Secret Answer" })
                        </div>
                        <div class="form-group">
                            <label>Workshop Coordinates</label>
                            <div style="height: 300px; width: 100%;">
                                <div id="map-canvas"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <input type="submit" class="btn btn-lg btn-success btn-block" value="Save" />
                        </div>
                    </fieldset>
                </div>
            </div>
        }

    </div>
</div>
<style>
    #map-canvas {
        height: 100%;
        margin: 0px;
        padding: 0px;
    }
</style>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp" type="text/javascript"></script>
<script type="text/javascript">
    $(document).ready(function () {
        Togglesecretquestion();
    });
    // In the following example, markers appear when the user clicks on the map.
    // The markers are stored in an array.
    // The user can then click an option to hide, show or delete the markers.
    var map;
    var markers = [];

    function initialize() {
        var haightAshbury = new google.maps.LatLng(37.7699298, -122.4469157);
        var mapOptions = {
            zoom: 12,
            center: haightAshbury,
            mapTypeId: google.maps.MapTypeId.TERRAIN
        };
        map = new google.maps.Map(document.getElementById('map-canvas'),
            mapOptions);

        // This event listener will call addMarker() when the map is clicked.
        google.maps.event.addListener(map, 'click', function (event) {
            addMarker(event.latLng);
        });

        // Adds a marker at the center of the map.
        addMarker(haightAshbury);
    }

    // Add a marker to the map and push to the array.
    function addMarker(location) {
        var marker = new google.maps.Marker({
            position: location,
            map: map
        });
        markers.push(marker);
    }

    // Sets the map on all markers in the array.
    function setAllMap(map) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }

    // Removes the markers from the map, but keeps them in the array.
    function clearMarkers() {
        setAllMap(null);
    }

    // Shows any markers currently in the array.
    function showMarkers() {
        setAllMap(map);
    }

    // Deletes all markers in the array by removing references to them.
    function deleteMarkers() {
        clearMarkers();
        markers = [];
    }

    google.maps.event.addDomListener(window, 'load', initialize);

    function Togglesecretquestion() {
        if ($("#bookonbehalf").is(":checked")) {
            $(".secret-question").show();
        }
        else {
            $(".secret-question").hide();
        }
    }

    function GetDealerDetails(ele) {
        var cp = $.ajax({
            url: "http://localhost:64932/Customer/ServiceDetails",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            data: { dealerId: parseInt($(ele).val()) },
            async: false,
            success: function (dataList) {
                var data = eval(dataList);
                $("#txtDealerNum").val(data.MobileNumber);
                $("#txtDealerEmailId").val(data.EmailId);
                var lt = parseFloat(data.MapLt);
                var lg = parseFloat(data.MapLg);
                deleteMarkers()
                var myLatlng = new google.maps.LatLng(lt, lg);
                addMarker();
            },

            error: function (XMLHttpRequest, textStatus, errorThrown) {
                debugger;
            }
        });
    }
</script>
